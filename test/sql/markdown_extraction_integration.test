# name: test/sql/markdown_extraction_integration.test
# description: Integration tests for markdown extraction functions with complex scenarios
# group: [markdown]

require markdown

#===================================================================
# Test 1: Complex Composition Scenarios
#===================================================================

# Test filtering documents by content type
query IIII
SELECT 
  doc_id,
  has_code,
  has_tables,
  has_images
FROM (VALUES 
  (1, E'```python\nprint("hello")\n```'),
  (2, E'| Table | Data |\n|-------|----- |\n| Row   | Value|'),
  (3, '![Image](test.jpg)'),
  (4, 'Just plain text'),
  (5, E'Mixed: [Link](http://example.com) and ```sql\nSELECT 1;\n```')
) as docs(doc_id, content)
CROSS JOIN LATERAL (
  SELECT 
    len(md_extract_code_blocks(content)) > 0 as has_code,
    len(md_extract_table_rows(content)) > 0 as has_tables,
    len(md_extract_images(content)) > 0 as has_images
) as features
ORDER BY doc_id;
----
1	true	false	false
2	false	true	false
3	false	false	true
4	false	false	false
5	true	false	false

# Test aggregated analysis across documents
query IIIII
SELECT 
  count(*) as total_docs,
  sum(len(md_extract_code_blocks(content))) as total_code_blocks,
  sum(len(md_extract_links(content))) as total_links,
  sum(len(md_extract_images(content))) as total_images,
  count(*) FILTER (WHERE len(md_extract_table_rows(content)) > 0) as docs_with_tables
FROM (VALUES 
  (E'```python\ncode1\n```'),
  ('[Link](http://example.com)'),
  ('![Image](img.jpg)'),
  (E'| A | B |\n|-|-|\n| 1 | 2 |'),
  (E'```sql\ncode2\n```\n[Another](http://test.com)')
) as docs(content);
----
5	2	2	1	1