# name: test/sql/markdown_realworld.test
# description: Real-world Markdown extension usage examples
# group: [markdown]

require markdown

# =================================================================
# Setup: Create sample documentation structure
# =================================================================

statement ok
CREATE TABLE sample_docs (file_path VARCHAR, content MARKDOWN);

statement ok
INSERT INTO sample_docs VALUES 
('docs/README.md', '# Project Name
A comprehensive library for data processing.

## Installation
```bash
pip install project-name
```

## Quick Start
```python
import project
result = project.process(data)
```'),
('docs/api/database.md', '# Database API

## Connection
Connect to database:
```python
db = Database("sqlite:///data.db")
```

## Queries
Execute queries:
```sql
SELECT * FROM users WHERE active = 1;
```'),
('docs/tutorials/getting-started.md', '# Getting Started Tutorial

Follow these steps to get up and running.

## Prerequisites
- Python 3.8+
- SQLite

## Your First Query
```python
from project import Database
db = Database()
results = db.query("SELECT 1")
```

See [API documentation](../api/database.md) for more details.');

# =================================================================
# Example 1: Build searchable documentation database
# =================================================================

statement ok
CREATE TABLE docs_search AS
SELECT 
    file_path, 
    section_id, 
    title, 
    md_to_text(content) as searchable_text
FROM (
    SELECT 
        sd.file_path,
        s.section_id,
        s.title,
        s.content
    FROM sample_docs sd
    CROSS JOIN LATERAL (
        SELECT * FROM read_markdown_sections(sd.content)
    ) s
);

query III
SELECT file_path, section_id, title FROM docs_search 
WHERE searchable_text LIKE '%Python%' 
ORDER BY file_path, section_id;
----
docs/README.md	quick-start	Quick Start
docs/api/database.md	connection	Connection
docs/tutorials/getting-started.md	prerequisites	Prerequisites
docs/tutorials/getting-started.md	your-first-query	Your First Query

# =================================================================
# Example 2: Extract all code examples with context
# =================================================================

statement ok
CREATE TABLE code_examples AS
SELECT 
    sd.file_path,
    s.section_id,
    s.title as section_title,
    c.language,
    c.code
FROM sample_docs sd
CROSS JOIN LATERAL (
    SELECT * FROM read_markdown_sections(sd.content)
) s
CROSS JOIN LATERAL md_extract_code_blocks(s.content) c;

query III
SELECT file_path, language, length(code) > 0 as has_code FROM code_examples 
ORDER BY file_path, language;
----
docs/README.md	bash	true
docs/README.md	python	true
docs/api/database.md	python	true
docs/api/database.md	sql	true
docs/tutorials/getting-started.md	python	true

# =================================================================
# Example 3: Analyze documentation quality
# =================================================================

statement ok
CREATE TABLE doc_metrics AS
SELECT 
    file_path,
    split_part(file_path, '/', 2) as doc_category,
    md_stats(content) as metrics
FROM sample_docs;

query II
SELECT doc_category, metrics.word_count FROM doc_metrics 
ORDER BY doc_category;
----
README.md	21
api	20
tutorials	34

# =================================================================
# Example 4: Cross-reference analysis
# =================================================================

statement ok
CREATE TABLE doc_links AS
SELECT 
    sd.file_path,
    l.text as link_text,
    l.url,
    CASE 
        WHEN l.url LIKE '../%' THEN 'internal_relative'
        WHEN l.url LIKE 'http%' THEN 'external'
        ELSE 'other'
    END as link_type
FROM sample_docs sd
CROSS JOIN LATERAL md_extract_links(sd.content) l;

query III
SELECT file_path, link_text, link_type FROM doc_links 
ORDER BY file_path;
----
docs/tutorials/getting-started.md	API documentation	internal_relative

# =================================================================
# Example 5: Content analysis and recommendations
# =================================================================

statement ok
CREATE TABLE content_analysis AS
SELECT 
    file_path,
    split_part(file_path, '/', 2) as category,
    metrics.word_count,
    metrics.code_block_count,
    metrics.link_count,
    CASE 
        WHEN metrics.word_count >= 30 AND metrics.code_block_count >= 2 THEN 'excellent'
        WHEN metrics.word_count >= 20 AND metrics.code_block_count >= 1 THEN 'good'
        WHEN metrics.word_count >= 10 THEN 'acceptable'
        ELSE 'needs_improvement'
    END as quality_score
FROM doc_metrics;

query IIII
SELECT category, quality_score, word_count, code_block_count 
FROM content_analysis 
ORDER BY quality_score DESC, word_count DESC;
----
tutorials	excellent	34	1
README.md	good	21	2
api	good	20	2

# =================================================================
# Example 6: Generate documentation report
# =================================================================

statement ok
CREATE VIEW doc_summary AS
SELECT 
    'Total Documents' as metric,
    COUNT(*)::TEXT as value
FROM sample_docs
UNION ALL
SELECT 
    'Total Sections',
    (SELECT COUNT(*)::TEXT FROM docs_search)
UNION ALL
SELECT 
    'Code Examples',
    (SELECT COUNT(*)::TEXT FROM code_examples)
UNION ALL
SELECT 
    'Programming Languages',
    (SELECT COUNT(DISTINCT language)::TEXT FROM code_examples)
UNION ALL
SELECT 
    'Internal Links',
    (SELECT COUNT(*)::TEXT FROM doc_links WHERE link_type = 'internal_relative')
UNION ALL
SELECT 
    'Quality Documents',
    (SELECT COUNT(*)::TEXT FROM content_analysis WHERE quality_score IN ('excellent', 'good'));

query II
SELECT metric, value FROM doc_summary ORDER BY metric;
----
Code Examples	5
Internal Links	1
Programming Languages	3
Quality Documents	3
Total Documents	3
Total Sections	8

# =================================================================
# Example 7: Search and filtering
# =================================================================

# Find sections mentioning databases
query II
SELECT file_path, title FROM docs_search 
WHERE lower(searchable_text) LIKE '%database%' 
ORDER BY file_path;
----
docs/api/database.md	Database API
docs/api/database.md	Connection

# Find Python code examples
query II
SELECT section_title, substr(code, 1, 30) || '...' as code_preview 
FROM code_examples 
WHERE language = 'python' 
ORDER BY file_path;
----
Quick Start	import project...
Connection	db = Database("sqlite:///data.db")...
Your First Query	from project import Database...

# =================================================================
# Example 8: Maintenance recommendations
# =================================================================

statement ok
CREATE TABLE maintenance_tasks AS
SELECT 
    file_path,
    category,
    quality_score,
    CASE 
        WHEN quality_score = 'needs_improvement' THEN 'Add more content and examples'
        WHEN code_block_count = 0 THEN 'Add code examples'
        WHEN link_count = 0 AND category != 'README.md' THEN 'Add cross-references'
        ELSE 'No immediate action needed'
    END as recommendation,
    CASE 
        WHEN quality_score = 'needs_improvement' THEN 'high'
        WHEN code_block_count = 0 THEN 'medium'
        ELSE 'low'
    END as priority
FROM content_analysis;

query III
SELECT category, recommendation, priority FROM maintenance_tasks 
WHERE priority != 'low' 
ORDER BY priority DESC, category;
----