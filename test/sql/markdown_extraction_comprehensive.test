# name: test/sql/markdown_extraction_comprehensive_clean.test
# description: Clean comprehensive test suite for markdown extraction functions
# group: [markdown]

require markdown

#===================================================================
# Test 1: Basic Function Existence and Signatures
#===================================================================

# Test all extraction functions exist
statement ok
SELECT md_extract_code_blocks('');

statement ok  
SELECT md_extract_links('');

statement ok
SELECT md_extract_images('');

statement ok
SELECT md_extract_table_rows('');

statement ok
SELECT md_extract_tables_json('');

#===================================================================
# Test 2: Parameter Validation and Error Handling
#===================================================================

# Test NULL input handling
query I
SELECT md_extract_code_blocks(NULL) IS NULL;
----
true

query I
SELECT md_extract_links(NULL) IS NULL;
----
true

# Test empty string input
query I
SELECT len(md_extract_code_blocks(''));
----
0

query I
SELECT len(md_extract_links(''));
----
0

# Test invalid parameter types - should fail
statement error
SELECT md_extract_code_blocks(123);
----
Binder Error

statement error
SELECT md_extract_links(123);
----
Binder Error

# Test too many parameters - should fail
statement error
SELECT md_extract_code_blocks('test', 'extra');
----
Binder Error

statement error
SELECT md_extract_links('test', 'extra');
----
Binder Error

#===================================================================
# Test 3: Code Block Extraction
#===================================================================

# Test single code block
query I
SELECT len(md_extract_code_blocks(E'```python\nprint("hello")\n```'));
----
1

# Test multiple code blocks
query I
SELECT len(md_extract_code_blocks(E'```python\ncode1\n```\n\n```sql\ncode2\n```'));
----
2

# Test code block structure - avoid multiline content issues
query II
SELECT 
  cb.language,
  cb.line_number
FROM (
  SELECT UNNEST(md_extract_code_blocks(E'```python\nprint("hello")\n```')) as cb
);
----
python	1

# Test code content with newline replacement (our solution!)
query I
SELECT replace(cb.code, chr(10), '\\n') as code_escaped
FROM (
  SELECT UNNEST(md_extract_code_blocks(E'```python\nprint("hello")\n```')) as cb
);
----
print("hello")\\n

# Test code block with no language
query I
SELECT cb.language
FROM (
  SELECT UNNEST(md_extract_code_blocks(E'```\nplain code\n```')) as cb
);
----
(empty)

#===================================================================
# Test 4: Link Extraction
#===================================================================

# Test simple link
query IIII
SELECT 
  link.text,
  link.url,
  link.title,
  link.is_reference
FROM (
  SELECT UNNEST(md_extract_links('[GitHub](https://github.com)')) as link
);
----
GitHub	https://github.com	NULL	false

# Test link with title
query III
SELECT 
  link.text,
  link.url,
  link.title
FROM (
  SELECT UNNEST(md_extract_links('[GitHub](https://github.com "Git Repository")')) as link
);
----
GitHub	https://github.com	Git Repository

# Test multiple links
query I
SELECT len(md_extract_links('[Link1](http://example.com) and [Link2](http://test.com)'));
----
2

# Test empty link text
query I
SELECT len(md_extract_links('[](http://example.com)'));
----
1

#===================================================================
# Test 5: Image Extraction
#===================================================================

# Test simple image
query III
SELECT 
  img.alt_text,
  img.url,
  img.title
FROM (
  SELECT UNNEST(md_extract_images('![Alt text](image.jpg)')) as img
);
----
Alt text	image.jpg	NULL

# Test image with title
query III
SELECT 
  img.alt_text,
  img.url,
  img.title
FROM (
  SELECT UNNEST(md_extract_images('![Photo](photo.jpg "My Photo")')) as img
);
----
Photo	photo.jpg	My Photo

# Test multiple images
query I
SELECT len(md_extract_images('![Image1](img1.jpg) and ![Image2](img2.png)'));
----
2

#===================================================================
# Test 6: Table Extraction
#===================================================================

# Test simple table
query I
SELECT len(md_extract_table_rows(E'| Name | Age |\n|------|-----|\n| John | 25  |'));
----
4

# Test table structure - headers
query I
SELECT count(*) 
FROM (
  SELECT UNNEST(md_extract_table_rows(E'| Name | Age |\n|------|-----|\n| John | 25  |')) as row
)
WHERE row.row_type = 'header';
----
2

# Test table structure - data
query I
SELECT count(*) 
FROM (
  SELECT UNNEST(md_extract_table_rows(E'| Name | Age |\n|------|-----|\n| John | 25  |')) as row
)
WHERE row.row_type = 'data';
----
2

#===================================================================
# Test 7: Edge Cases and Composition
#===================================================================

# Test mixed content
query III
SELECT 
  len(md_extract_code_blocks(content)) > 0 as has_code,
  len(md_extract_links(content)) > 0 as has_links,
  len(md_extract_images(content)) > 0 as has_images
FROM (SELECT E'# Mixed\n[link](http://example.com) ![image](img.jpg)\n```python\ncode\n```' as content);
----
true	true	true

# Test aggregation across multiple pieces of content
query II
SELECT 
  sum(len(md_extract_code_blocks(content))) as total_code_blocks,
  sum(len(md_extract_links(content))) as total_links
FROM (VALUES 
  (E'```python\nprint("test")\n```'),
  ('[Link](http://example.com)'),
  (E'```sql\nSELECT 1;\n```\n[Another link](http://test.com)')
) as docs(content);
----
2	2

# Test filtering based on extraction results
query I
SELECT count(*)
FROM (VALUES 
  (E'```python\nprint("test")\n```'),
  ('No code here'),
  (E'```sql\nSELECT 1;\n```')
) as docs(content)
WHERE len(md_extract_code_blocks(content)) > 0;
----
2

#===================================================================
# Test 8: Performance and Memory
#===================================================================

# Test empty results don't cause issues
query IIII
SELECT 
  md_extract_code_blocks('') IS NOT NULL as code_ok,
  md_extract_links('') IS NOT NULL as links_ok,
  md_extract_images('') IS NOT NULL as images_ok,
  md_extract_table_rows('') IS NOT NULL as tables_ok;
----
true	true	true	true

# Test repeated calls
query I
SELECT count(*)
FROM generate_series(1, 10) as i
CROSS JOIN (
  SELECT UNNEST(md_extract_code_blocks(E'```python\nprint("test")\n```')) as blocks
);
----
10